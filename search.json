[{"path":[]},{"path":"https://simonpcouch.github.io/chores/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://simonpcouch.github.io/chores/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://simonpcouch.github.io/chores/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://simonpcouch.github.io/chores/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://simonpcouch.github.io/chores/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://simonpcouch.github.io/chores/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://simonpcouch.github.io/chores/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://simonpcouch.github.io/chores/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://simonpcouch.github.io/chores/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://simonpcouch.github.io/chores/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://simonpcouch.github.io/chores/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://simonpcouch.github.io/chores/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to chores","title":"Contributing to chores","text":"outlines propose change chores. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://simonpcouch.github.io/chores/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to chores","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://simonpcouch.github.io/chores/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to chores","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://simonpcouch.github.io/chores/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to chores","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"simonpcouch/chores\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://simonpcouch.github.io/chores/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to chores","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://simonpcouch.github.io/chores/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to chores","text":"Please note chores project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://simonpcouch.github.io/chores/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 chores authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://simonpcouch.github.io/chores/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with chores","title":"Getting help with chores","text":"Thanks using chores! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://simonpcouch.github.io/chores/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with chores","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://simonpcouch.github.io/chores/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with chores","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://simonpcouch.github.io/chores/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with chores","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://simonpcouch.github.io/chores/articles/chores.html","id":"choosing-a-model","dir":"Articles","previous_headings":"","what":"Choosing a model","title":"Getting started with chores","text":"chores addin supports model supported ellmer. choosing model use chores, ’ll want use performant model possible satisfies privacy needs; chores automatically passes along selected code chosen model, ’s especially important consider data privacy using LLMs chores. chores uses .chores_chat option configure model powers addin. .chores_chat set ellmer Chat object. example, use Anthropic’s Claude, might write options(.chores_chat = ellmer::chat_anthropic()). Paste code .Rprofile via usethis::edit_r_profile() always use model every time start R session. ’re using ellmer inside organization, ’ll limited department allows, likely one provided big cloud provider, e.g. chat_azure(), chat_bedrock(), chat_databricks(), chat_snowflake(). ’re using ellmer exploration, ’ll lot freedom, recommendations help get started: early 2025, Anthropic’s Claude Sonnet 3.5 powerful model code assistance model ’ve used developing package. want use Claude, ’ll need register API key https://console.anthropic.com/ environment variable ANTHROPIC_API_KEY set options(.chores_chat = ellmer::chat_anthropic()). Regarding OpenAI’s models, chat_openai() defaults GPT-4o, can use model = \"gpt-4o-mini\" cheaper, lower-quality model; use OpenAI model, ’ll need set options options(.chores_chat = ellmer::chat_openai(model = \"gpt-4o\")) register OpenAI API key OPENAI_API_KEY environment variable. can use local model chat_ollama(), uses Ollama allows run models computer. biggest models can run locally aren’t good state art hosted models, don’t share data effectively free. use ollama model, run model locally set options(.chores_chat = ellmer::chat_ollama(model = \"model-name\")). Instead model-name, ’d substitute name model appears run ollama list console.","code":""},{"path":"https://simonpcouch.github.io/chores/articles/chores.html","id":"the-chores-addin","dir":"Articles","previous_headings":"","what":"The chores addin","title":"Getting started with chores","text":"Rather package functions directly, helpers interfaced via chores addin. default model set , ’re ready use package RStudio session (even haven’t loaded package yet). Just: Select code. Trigger chores addin. Type helper “chore.” ’s autocompleted, press Enter. Watch code rewritten.  Chore helpers interfaced via chores addin. easiest access, recommend registering chores addin keyboard shortcut. RStudio, navigate Tools > Modify Keyboard Shortcuts > Search \"Chores\"—suggest Ctrl+Alt+C (Ctrl+Cmd+C macOS). Positron, ’ll need open command palette, run “Open Keyboard Shortcuts (JSON)”, paste following keybindings.json: analogous keybinding non-macOS Ctrl+Alt+C. said, change \"key\" entry keybinding wish! steps completed, ’re ready use helpers keyboard shortcut.","code":"{         \"key\": \"Ctrl+Cmd+C\",         \"command\": \"workbench.action.executeCode.console\",         \"when\": \"editorTextFocus\",         \"args\": {             \"langId\": \"r\",             \"code\": \"chores::.init_addin()\",             \"focus\": true         }     }"},{"path":"https://simonpcouch.github.io/chores/articles/chores.html","id":"adding-custom-helpers","dir":"Articles","previous_headings":"","what":"Adding custom helpers","title":"Getting started with chores","text":"chores package comes three helpers package development, one can use helpers sorts coding tasks R, interactive data analysis authoring Quarto, even coding tasks languages R! need set helper markdown file. learn adding custom helpers well share others, see “Custom helpers” vignette vignette(\"custom\", package = \"chores\").","code":""},{"path":"https://simonpcouch.github.io/chores/articles/custom.html","id":"what-are-helpers-for","dir":"Articles","previous_headings":"","what":"What are helpers for?","title":"Custom helpers","text":"building custom chore helper, first ask questions help decide whether chore helper right tool job. Can easily automated without LLM? LLMs quite good edge-case rich tasks “squishy,” hard--evaluate output. Compared many pieces software, LLMs incredibly flexible able handle edge cases without extensive engineering. time, output deterministic always requires verification. given problem, better spending time ’d use write revise prompt verifying every output makes instead just writing R code unit tests? Users interface helpers via active selection. selection provide enough context helper job? , besides fixed system prompt attached helper, information LLM problem text ’ve selected cursor. model need access whole file, whole project, order job? case, interface helper may better fit. Chore helpers return output replacing, prefixing, suffixing current selection. right place output use case? output ultimately needs cut pasted different file, example, helpers may right tool. Finally, kind output immediately verifiable? first element consider much stuff model ultimately generates. sentences couple lines code can quickly audited confirmed sound. second element consider whether output can programmatically checked. example, generated code run without error (, least, syntactically valid)? Answering questions can help better understand whether problem best solved helper , instead, human “normal” code LLM interface.","code":""},{"path":"https://simonpcouch.github.io/chores/articles/custom.html","id":"the-prompt-directory","dir":"Articles","previous_headings":"","what":"The prompt directory","title":"Custom helpers","text":"easiest way write new chore helper ’s loaded every time load R add markdown file prompt directory. prompt directory folder markdown files serves library possible helpers. default, prompt directory lives ~/.config/chores, default can changed adding .chores_dir option .Rprofile using options(.chores_dir = /dir/). directory_path() returns path directory, directory_set() changes , directory_list() enumerates prompts currently live , directory_load() registers/refreshes prompts directory chores package. create new helper, add prompt chores’ prompt directory prompt_new(). ’ll need supply chore (single keyword describing helper , like \"roxygen\") interface describing helper interact selection (one \"replace\", \"prefix\", \"suffix\"). can also “pre-fill” contents prompt supplying file path contents argument. example, running: result prompt directory looks like: case, chores register two custom helpers call library(chores) (directory_load(). One \"proofread\" chore replace selected text proofread version (according instructions contained markdown file ). chore \"summarize\" prefix selected text summarized version (, according markdown file’s instructions). Files without .md extension ignored. Files .md extension must contain one hyphen filename, text following hyphen must one replace, prefix, suffix. best way register helpers personal use via prompt directory. However, intend share helpers others, may interested creating helper extension package. (, please add chores gallery! Check vignette(\"gallery\", package = \"chores\").)","code":"prompt_new(\"proofread\", \"replace\") prompt_new(\"summarize\", \"prefix\") / |-- .config/ |   |-- chores/ |       |-- proofread-replace.md |       |-- summarize-prefix.md"},{"path":"https://simonpcouch.github.io/chores/articles/custom.html","id":"extension-packages","dir":"Articles","previous_headings":"","what":"Extension packages","title":"Custom helpers","text":"chores extension packages allow flexibly share helper prompts others. Putting together helper extension package straightforward: Place one markdown file per new chore helper inst/prompts/. folder take format prompt directory described . Place call chores::directory_load() package’s .onLoad(), referencing extension package’s system.file(\"prompts\", package = \"yourpackage\"). automatically register package’s prompts chores extension loaded. example chores extension, see simonpcouch/palpable. chores extension packages also allow document helpers tend behave context; situate documentation files ?chore_helper, replacing chore new chore helper’s name. , package loaded, users can view high-level description helper’s behavior gallery examples. See ?cli_helper example helper help-page, source code .","code":""},{"path":"https://simonpcouch.github.io/chores/articles/custom.html","id":"using-others-custom-helpers","dir":"Articles","previous_headings":"","what":"Using others’ custom helpers","title":"Custom helpers","text":"chores designed make easy possible always helpers need hand. use others’ custom helpers aren’t situated extension packages, use prompt_new() contents argument. example, Hannah Frick wrote helper transition R code chunks R Markdown-style chunk headers Quarto’s yaml syntax uploaded GitHub Gist . use helper, write: running code, quartochunk helper available every time trigger chores addin. use others’ custom helpers extension packages, simply load chores extension .Rprofile. might use usethis::edit_r_profile() open file, drop following line: , restart R, package’s helpers always available trigger chores addin.","code":"prompt_new(   \"quartochunk\",    \"replace\",    contents = \"https://gist.githubusercontent.com/hfrick/1ca8fc2cb2a4409b743e8120c6cc2223/raw/a9703edfbd4e83839af0278c33add1b33e243d02/quartochunk-replace.md\" ) library(choresextensionname)"},{"path":"https://simonpcouch.github.io/chores/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Simon Couch. Author, maintainer. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://simonpcouch.github.io/chores/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Couch S (2025). chores: Collection Large Language Model Assistants. R package version 0.2.0.9000, https://github.com/simonpcouch/chores.","code":"@Manual{,   title = {chores: A Collection of Large Language Model Assistants},   author = {Simon Couch},   year = {2025},   note = {R package version 0.2.0.9000},   url = {https://github.com/simonpcouch/chores}, }"},{"path":"https://simonpcouch.github.io/chores/index.html","id":"chores-","dir":"","previous_headings":"","what":"A Collection of Large Language Model Assistants","title":"A Collection of Large Language Model Assistants","text":"chores package provides library ergonomic LLM assistants designed help complete repetitive, hard--automate tasks quickly. selecting code, press keyboard shortcut ’ve chosen trigger chores addin (suggest Ctrl+Cmd+C), select helper, watch code rewritten. package used called pal.","code":""},{"path":"https://simonpcouch.github.io/chores/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Collection of Large Language Model Assistants","text":"Getting started chores takes three steps. 1) Install chores package like : can install developmental version : 2) , need configure chores ellmer model. chores uses ellmer hood, model can chat ellmer also supported chores. configure chores ellmer, set option .chores_chat ellmer Chat. example, use Claude, ’d write options(.chores_chat = ellmer::chat_anthropic()), possibly .Rprofile chores ready go every time start R. learn , see Getting started chores vignette. 3) Chore helpers interfaced via chores addin. easiest access, recommend registering chores addin keyboard shortcut. RStudio, navigate Tools > Modify Keyboard Shortcuts > Search \"Chores\"—suggest Ctrl+Alt+C (Ctrl+Cmd+C macOS). Positron, ’ll need open command palette, run “Open Keyboard Shortcuts (JSON)”, paste following keybindings.json: analogous keybinding non-macOS Ctrl+Alt+C. said, change \"key\" entry keybinding wish! steps completed, ’re ready use helpers keyboard shortcut.","code":"install.packages(\"chores\") pak::pak(\"simonpcouch/chores\") {         \"key\": \"Ctrl+Cmd+C\",         \"command\": \"workbench.action.executeCode.console\",         \"when\": \"editorTextFocus\",         \"args\": {             \"langId\": \"r\",             \"code\": \"chores::.init_addin()\",             \"focus\": true         }     }"},{"path":"https://simonpcouch.github.io/chores/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A Collection of Large Language Model Assistants","text":"Chore helpers created automatically users interact chores addin. Just highlight code, open addin, begin typing “chore” chores press “Return”, watch code rewritten:  -, package provides ergonomic LLM assistants R package development: \"cli\": Convert cli \"testthat\": Convert testthat 3 \"roxygen\": Document functions roxygen Users also contributed number helpers wide range tasks–see vignette(\"gallery\", package = \"chores\") gallery user-contributed helpers! said, need create chore helper markdown file instructions ’d like work. See prompt_new() information, palpable example chores extension package.","code":""},{"path":"https://simonpcouch.github.io/chores/index.html","id":"how-much-do-helpers-cost","dir":"","previous_headings":"","what":"How much do helpers cost?","title":"A Collection of Large Language Model Assistants","text":"cost using helpers depends 1) length underlying prompt given helper 2) cost per token chosen model. Using cli helper Anthropic’s Claude Sonnet 3.5, example, costs something like $15 per 1,000 code refactorings, using testthat helper OpenAI’s GPT 4o-mini cost something like $1 per 1,000 refactorings. Chore helpers using locally-served LLM “free” (usual sense code execution, ignoring cost increased battery usage).","code":""},{"path":"https://simonpcouch.github.io/chores/reference/chores-package.html","id":null,"dir":"Reference","previous_headings":"","what":"chores: A Collection of Large Language Model Assistants — chores-package","title":"chores: A Collection of Large Language Model Assistants — chores-package","text":"Provides collection ergonomic large language model assistants designed help complete repetitive, hard--automate tasks quickly. selecting code, press keyboard shortcut chosen trigger package app, select assistant, watch chore carried . package ships number chore helpers R package development, users can create custom helpers just writing instructions markdown file.","code":""},{"path":[]},{"path":"https://simonpcouch.github.io/chores/reference/chores-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"chores: A Collection of Large Language Model Assistants — chores-package","text":"Maintainer: Simon Couch simon.couch@posit.co (ORCID) contributors: Posit Software, PBC (03wc8by49) [copyright holder, funder]","code":""},{"path":"https://simonpcouch.github.io/chores/reference/cli_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"The cli helper — cli_helper","title":"The cli helper — cli_helper","text":"couple years ago, tidyverse team began migrating cli R package raising errors, transitioning away base R (e.g. stop()), rlang (e.g. rlang::abort()), glue, homegrown combinations . cli's new syntax easier work developer visually pleasing user. cases, transitioning simple Finding + Replacing rlang::abort() cli::cli_abort(). others, mess ad-hoc pluralization, paste0()s, glue interpolations, assorted nonsense sort . Total pain, especially thousands upon thousands error messages thrown across tidyverse, r-lib, tidymodels organizations. cli helper helps convert R package use cli error messages.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/cli_helper.html","id":"cost","dir":"Reference","previous_headings":"","what":"Cost","title":"The cli helper — cli_helper","text":"system prompt cli helper includes something like 4,000 tokens. Add (generous) 100 tokens code actually highlighted also sent model looking 4,100 input tokens. model returns approximately number output tokens receives, call 100 output tokens per refactor. time writing (October 2024), recommended chores model Claude Sonnet 3.5 costs $3 per million input tokens $15 per million output tokens. , using recommended model, cli helpers cost around $15 every 1,000 refactored pieces code. GPT-4o Mini, contrast, tend get cli markup classes right return syntactically valid calls cli functions, cost around 75 cents per 1,000 refactored pieces code.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/cli_helper.html","id":"gallery","dir":"Reference","previous_headings":"","what":"Gallery","title":"The cli helper — cli_helper","text":"section includes handful examples \"wild\" generated recommended model, Claude Sonnet 3.5. simplest, one-line message little bit markup:   Returns:   strange vector collapsing funky line breaking:   Returns:   message probably best lives two separate elements:   Returns:   Gnarly ad-hoc pluralization:   Returns:   paste0() wonk:   Returns:   model instructed return call cli function, erroring code run conditionally can get borked:   Returns:   Note ?valid cli markup. Sprintf-style statements issue:   Returns:","code":"rlang::abort(\"`save_pred` can only be used if the initial results saved predictions.\") cli::cli_abort(\"{.arg save_pred} can only be used if the initial results saved predictions.\") extra_grid_params <- glue::single_quote(extra_grid_params) extra_grid_params <- glue::glue_collapse(extra_grid_params, sep = \", \")  msg <- glue::glue(   \"The provided `grid` has the following parameter columns that have \",   \"not been marked for tuning by `tune()`: {extra_grid_params}.\" )  rlang::abort(msg) cli::cli_abort(   \"The provided {.arg grid} has parameter columns that have not been    marked for tuning by {.fn tune}: {.val {extra_grid_params}}.\" ) rlang::abort(   paste(     \"Some model parameters require finalization but there are recipe\",     \"parameters that require tuning. Please use \",     \"`extract_parameter_set_dials()` to set parameter ranges \",     \"manually and supply the output to the `param_info` argument.\"   ) ) cli::cli_abort(   c(     \"Some model parameters require finalization but there are recipe      parameters that require tuning.\",     \"i\" = \"Please use {.fn extract_parameter_set_dials} to set parameter            ranges manually and supply the output to the {.arg param_info}            argument.\"   ) ) msg <- \"Creating pre-processing data to finalize unknown parameter\" unk_names <- pset$id[unk] if (length(unk_names) == 1) {   msg <- paste0(msg, \": \", unk_names) } else {   msg <- paste0(msg, \"s: \", paste0(\"'\", unk_names, \"'\", collapse = \", \")) } rlang::inform(msg) cli::cli_inform(   \"Creating pre-processing data to finalize unknown parameter{?s}: {.val {unk_names}}\" ) rlang::abort(paste0(   \"The workflow has arguments to be tuned that are missing some \",   \"parameter objects: \",   paste0(\"'\", pset$id[!params], \"'\", collapse = \", \") )) cli::cli_abort(   \"The workflow has arguments to be tuned that are missing some    parameter objects: {.val {pset$id[!params]}}\" ) cls <- paste(cls, collapse = \" or \") if (!fine) {   msg <- glue::glue(\"Argument '{deparse(cl$x)}' should be a {cls} or NULL\")   if (!is.null(where)) {     msg <- glue::glue(msg, \" in `{where}`\")   }   rlang::abort(msg) } cli::cli_abort(   \"Argument {.code {deparse(cl$x)}} should be {?a/an} {.cls {cls}} or {.code NULL}{?in {where}}.\" ) abort(sprintf(\"No such '%s' function: `%s()`.\", package, name)) cli::cli_abort(\"No such {.pkg {package}} function: {.fn {name}}.\")"},{"path":"https://simonpcouch.github.io/chores/reference/cli_helper.html","id":"interfacing-manually-with-the-cli-helper","dir":"Reference","previous_headings":"","what":"Interfacing manually with the cli helper","title":"The cli helper — cli_helper","text":"Chore helpers typically interfaced via chores addin. call cli helper directly, use:   , submit query, run:","code":"helper_cli <- .init_helper(\"cli\") helper_cli$chat({x})"},{"path":"https://simonpcouch.github.io/chores/reference/directory.html","id":null,"dir":"Reference","previous_headings":"","what":"The prompt directory — directory","title":"The prompt directory — directory","text":"chores package's prompt directory directory markdown files automatically registered chores package package load. directory_*() functions allow users interface directory, making new \"chores\" available: directory_path() returns path prompt directory. directory_set() changes path prompt directory (setting option .chores_dir). directory_list() enumerates different prompts currently live directory (provides clickable links ). Functions prefixed prompt*() allow users conveniently create, edit, delete prompts chores' prompt directory.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The prompt directory — directory","text":"","code":"directory_load(dir = directory_path())  directory_list()  directory_path()  directory_set(dir)"},{"path":"https://simonpcouch.github.io/chores/reference/directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The prompt directory — directory","text":"dir Path directory markdown files–see Details .","code":""},{"path":"https://simonpcouch.github.io/chores/reference/directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The prompt directory — directory","text":"directory_path() returns path prompt directory (created default unless explicitly requested user). directory_set() return path new prompt directory. directory_list() returns file paths prompts currently live directory (provides clickable links ). directory_load() returns NULL invisibly.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/directory.html","id":"format-of-the-prompt-directory","dir":"Reference","previous_headings":"","what":"Format of the prompt directory","title":"The prompt directory — directory","text":"Prompts markdown files name chore-interface.md, interface one \"replace\", \"prefix\" \"suffix\". example directory might look like:   case, chores register two custom helpers call library(chores). One \"proofread\" chore replace selected text proofread version (according instructions contained markdown file ). \"summarize\" chore prefix selected text summarized version (, according markdown file's instructions). Note: Files without .md extension ignored. Files .md extension must contain one hyphen filename, text following hyphen must one replace, prefix, suffix. load custom prompts every time package loaded, place prompts directory_path(). change prompt directory without loading package, just set .chores_dir option options(.chores_dir = some_dir). load directory files prompt directory, provide dir argument directory_load().","code":"/ |-- .config/ |   |-- chores/ |       |-- proofread-replace.md |       |-- summarize-prefix.md"},{"path":[]},{"path":"https://simonpcouch.github.io/chores/reference/directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The prompt directory — directory","text":"","code":"# choose a path for the prompt directory tmp_dir <- withr::local_tempdir() directory_set(tmp_dir) #> Error in directory_set(tmp_dir): `dir` doesn't exist. #> ℹ If desired, create it with `dir.create(\"/tmp/RtmpWkPsfo/file1dfc5b0c9fc0\", #>   recursive = TRUE)`.  # print out the current prompt directory directory_path() #> [1] \"~/.config/chores\"  # list out prompts currently in the directory directory_list()  # create a prompt in the prompt directory prompt_new(\"boop\", \"replace\")  # view updated list of prompts directory_list()"},{"path":"https://simonpcouch.github.io/chores/reference/dot-init_addin.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the chores addin — .init_addin","title":"Run the chores addin — .init_addin","text":"chores addin allows users interactively select chore helper interface current selection. function intended interfaced regular usage package. launch chores addin RStudio, navigate Addins > Chores /register addin shortcut via Tools > Modify Keyboard Shortcuts > Search \"Chores\"–suggest Ctrl+Alt+C (Ctrl+Cmd+C macOS).","code":""},{"path":"https://simonpcouch.github.io/chores/reference/dot-init_addin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the chores addin — .init_addin","text":"","code":".init_addin()"},{"path":"https://simonpcouch.github.io/chores/reference/dot-init_addin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the chores addin — .init_addin","text":"NULL, invisibly. Called side effect launching chores addin interfacing selected text.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/dot-init_addin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the chores addin — .init_addin","text":"","code":"if (interactive()) {   .init_addin() }"},{"path":"https://simonpcouch.github.io/chores/reference/dot-init_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Helper object — .init_helper","title":"Initialize a Helper object — .init_helper","text":"Users typically need call function. Create new helpers automatically registered function prompt_new(). chores addin initialize needed helpers --fly.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/dot-init_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Helper object — .init_helper","text":"","code":".init_helper(chore = NULL, .chores_chat = getOption(\".chores_chat\"))"},{"path":"https://simonpcouch.github.io/chores/reference/dot-init_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Helper object — .init_helper","text":"chore identifier helper prompt. default one \"cli\", \"testthat\" \"roxygen\", though custom helpers can added prompt_new(). .chores_chat ellmer Chat, e.g. function() ellmer::chat_anthropic(). Defaults option name, e.g. set options(.chores_chat = ellmer::chat_anthropic()) .Rprofile configure chores ellmer every time start new R session.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/dot-init_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Helper object — .init_helper","text":"Helper object, subclass ellmer chat.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/dot-init_helper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a Helper object — .init_helper","text":"","code":"# requires an API key and sets options if (FALSE) { # \\dontrun{ # to create a chat with claude: .init_helper(.chores_chat = ellmer::chat_anthropic())  # or with OpenAI's 4o-mini: .init_helper(.chores_chat = ellmer::chat_openai(model = \"gpt-4o-mini\"))  # to set OpenAI's 4o-mini as the default model powering chores, for example, # set the following option (possibly in your .Rprofile, if you'd like # them to persist across sessions): options(   .chores_chat = ellmer::chat_openai(model = \"gpt-4o-mini\") ) } # }"},{"path":"https://simonpcouch.github.io/chores/reference/helper_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Options used by the chores package — helper_options","title":"Options used by the chores package — helper_options","text":"chores package makes use three notable user-facing options: .chores_dir directory helper prompts live. See helper directory help-page information. .chores_chat determines underlying LLM powering helper. See \"Choosing model\" section vignette(\"chores\", package = \"chores\") information.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Working with helper prompts — prompt","title":"Working with helper prompts — prompt","text":"chores package provides number tools working system prompts. System prompts instruct helpers behave provide information live models' \"short-term memory.\" prompt_*() functions allow users conveniently create, edit, remove, prompts chores' \"prompt directory.\" prompt_new() creates new markdown file automatically create helper specified chore, prompt, interface package load. Specify contents argument prefill contents markdown file computer web. prompt_edit() prompt_remove() open delete, respectively, file defines given chore's system prompt. prompts create functions automatically loaded next trigger helper addin.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Working with helper prompts — prompt","text":"","code":"prompt_new(chore, interface, contents = NULL)  prompt_remove(chore)  prompt_edit(chore)"},{"path":"https://simonpcouch.github.io/chores/reference/prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Working with helper prompts — prompt","text":"chore single string giving descriptor helper's functionality. Cand contain letters numbers. interface One \"replace\", \"prefix\", \"suffix\", describing helper interact selection. example, cli helper \"replace\"s selection, roxygen helper \"prefixes\" selected code documentation. contents Optional. Path markdown file contents \"pre-fill\" file. Anything file ending .md .markdown can read readLines() fair game; local file, \"raw\" URL GitHub Gist file GitHub repository, etc.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Working with helper prompts — prompt","text":"prompt_*() function returns file path created, edited, removed filepath, invisibly.","code":""},{"path":[]},{"path":"https://simonpcouch.github.io/chores/reference/prompt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Working with helper prompts — prompt","text":"","code":"if (interactive()) { # create a new helper for chore `\"boop\"` that replaces the selected text: prompt_new(\"boop\")  # after closing the file, reopen with: prompt_edit(\"boop\")  # remove the prompt (next time the package is loaded) with: prompt_remove(\"boop\")  # pull prompts from files on local drives or the web with # `prompt_new(contents)`. for example, here is a GitHub Gist: # paste0( #  \"https://gist.githubusercontent.com/simonpcouch/\", #  \"daaa6c4155918d6f3efd6706d022e584/raw/ed1da68b3f38a25b58dd9fdc8b9c258d\", #  \"58c9b4da/summarize-prefix.md\" # ) # # press \"Raw\" and then supply that URL as `contents` (you don't actually # have to use the paste0() to write out the URL--we're just keeping # the characters per line under 80): prompt_new(   chore = \"summarize\",   interface = \"prefix\",   contents =     paste0(       \"https://gist.githubusercontent.com/simonpcouch/\",       \"daaa6c4155918d6f3efd6706d022e584/raw/ed1da68b3f38a25b58dd9fdc8b9c258d\",       \"58c9b4da/summarize-prefix.md\"     ) ) }"},{"path":"https://simonpcouch.github.io/chores/reference/roxygen_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"The roxygen helper — roxygen_helper","title":"The roxygen helper — roxygen_helper","text":"roxygen helper prefixes selected function minimal roxygen2 documentation template. helper instructed generate subset complete documentation entry, completed developer: Stub @param descriptions based defaults inferred types Stub @returns entry describes return value well important errors warnings users might encounter.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/roxygen_helper.html","id":"cost","dir":"Reference","previous_headings":"","what":"Cost","title":"The roxygen helper — roxygen_helper","text":"system prompt roxygen helper includes something like 1,000 tokens. Add 200 tokens code actually highlighted also sent model looking 1,200 input tokens. model returns maybe 10 15 lines relatively barebones royxgen documentation, call 200 output tokens per refactor. time writing (October 2024), recommended chores model Claude Sonnet 3.5 costs $3 per million input tokens $15 per million output tokens. , using recommended model, roxygen helpers cost around $4 every 1,000 generated roxygen documentation entries. GPT-4o Mini, contrast, tend infer argument types correctly often often fails line-break properly, usually return syntactically valid documentation entries, cost around 20 cents per 1,000 generated roxygen documentation entries.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/roxygen_helper.html","id":"gallery","dir":"Reference","previous_headings":"","what":"Gallery","title":"The roxygen helper — roxygen_helper","text":"section includes handful examples \"wild\" generated recommended model, Claude Sonnet 3.5. Documenting function factory:   Returns:   function may raise condition:   Returns:   function tricky indexing:   Returns:","code":"deferred_method_transform <- function(lambda_expr, transformer, eval_env) {   transformer <- enexpr(transformer)   force(eval_env)    unique_id <- new_id()   env_bind_lazy(     generators,     !!unique_id := inject((!!transformer)(!!lambda_expr)),     eval.env = eval_env   )    inject(     function(...) {       (!!generators)[[!!unique_id]](self, private, ...)     }   ) } #' #' Transform a deferred method #' #' @description #' A short description... #' #' @param lambda_expr A lambda expression to transform. #' @param transformer A transformer function or expression. #' @param eval_env The environment in which to evaluate the transformer. #' #' @returns #' A function that, when called, will evaluate the transformed lambda expression. #' The returned function accepts `...` arguments which are passed to the generated function. #' #' @export set_default <- function(value, default, arg = caller_arg(value)) {   if (is.null(value)) {     if (!is_testing() || is_snapshot()) {       cli::cli_inform(\"Using {.field {arg}} = {.val {default}}.\")     }     default   } else {     value   } } #' Set default value #' #' @description #' A short description... #' #' @param value A value to check. #' @param default The default value to use if `value` is NULL. #' @param arg Optional. The name of the argument being set. #' #' @returns #' Returns `value` if it's not NULL, otherwise returns `default`. #' Informs the user when using the default value. #' #' @export find_index <- function(left, e_right) {   if (!is.list(e_right) || !has_name(e_right, \"index\") || !is.numeric(e_right$index)) {     return(NA)   }    matches_idx <- map_lgl(left, function(e_left) e_left$index == e_right$index)   if (sum(matches_idx) != 1) {     return(NA)   }   which(matches_idx)[[1]] } #' Find matching index #' #' @description #' A short description... #' #' @param left A list of elements, each expected to have an 'index' field. #' @param e_right A list with an 'index' field to search for in `left`. #' #' @returns #' The numeric index in `left` where `e_right$index` matches, or NA if not found #' or if inputs are invalid. Returns NA if multiple matches are found. #' #' @export"},{"path":"https://simonpcouch.github.io/chores/reference/roxygen_helper.html","id":"interfacing-manually-with-the-roxygen-helper","dir":"Reference","previous_headings":"","what":"Interfacing manually with the roxygen helper","title":"The roxygen helper — roxygen_helper","text":"Chore helpers typically interfaced via chores addin. call roxygen helper directly, use:   , submit query, run:","code":"helper_roxygen <- .init_helper(\"roxygen\") helper_roxygen$chat({x})"},{"path":"https://simonpcouch.github.io/chores/reference/testthat_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"The testthat helper — testthat_helper","title":"The testthat helper — testthat_helper","text":"testthat 3.0.0 released 2020, bringing numerous changes huge quality life improvements package developers also highly breaking changes. task converting legacy unit testing code testthat 3e quite pretty straightforward, components can quite tedious. testthat helper helps transition R package's unit tests third edition testthat, namely via: Converting snapshot tests Disentangling nested expectations Transitioning deprecated functions like expect_known_*()","code":""},{"path":"https://simonpcouch.github.io/chores/reference/testthat_helper.html","id":"cost","dir":"Reference","previous_headings":"","what":"Cost","title":"The testthat helper — testthat_helper","text":"system prompt testthat helper includes something like 1,000 tokens. Add (generous) 100 tokens code actually highlighted also sent model looking 1,100 input tokens. model returns approximately number output tokens receives, call 100 output tokens per refactor. time writing (October 2024), recommended chores model Claude Sonnet 3.5 costs $3 per million input tokens $15 per million output tokens. , using recommended model, testthat helpers cost around $4 every 1,000 refactored pieces code. GPT-4o Mini, contrast, tend get many pieces formatting right often fails line-break properly, usually return syntactically valid calls testthat functions, cost around 20 cents per 1,000 refactored pieces code.","code":""},{"path":"https://simonpcouch.github.io/chores/reference/testthat_helper.html","id":"gallery","dir":"Reference","previous_headings":"","what":"Gallery","title":"The testthat helper — testthat_helper","text":"section includes handful examples \"wild\" generated recommended model, Claude Sonnet 3.5. Testthat helpers convert expect_error() (*_warning() *_message() *_condition()) calls use expect_snapshot() regular expression present:   Returns:   Note, well, intermediate results assigned object snapshotted contents previously tests. Another example multiple, redudant calls:   Returns:   know regexp = NA, means \"error\" (warning, message):   Returns:   also know adjust calls condition expectations class argument present (usually means one testing condition another package, able change wording message without consequence):   Returns:   converting non-erroring code, testthat helpers assign intermediate results snapshot result warning:   Returns:   Nested expectations can generally disentangled without issue:   Returns:   also edits helper knows make third-edition code. example, transitions expect_snapshot_error() friends use expect_snapshot(error = TRUE) error context snapshotted addition message :   Returns:","code":"expect_warning(   check_ellipses(\"exponentiate\", \"tidy\", \"boop\", exponentiate = TRUE, quick = FALSE),   \"\\\\`exponentiate\\\\` argument is not supported in the \\\\`tidy\\\\(\\\\)\\\\` method for \\\\`boop\\\\` objects\" ) expect_snapshot(   .res <- check_ellipses(     \"exponentiate\", \"tidy\", \"boop\", exponentiate = TRUE, quick = FALSE   ) ) augment_error <- \"augment is only supported for fixest models estimated with feols, feglm, or femlm\" expect_error(augment(res_fenegbin, df), augment_error) expect_error(augment(res_feNmlm, df), augment_error) expect_error(augment(res_fepois, df), augment_error) expect_snapshot(error = TRUE, augment(res_fenegbin, df)) expect_snapshot(error = TRUE, augment(res_feNmlm, df)) expect_snapshot(error = TRUE, augment(res_fepois, df)) expect_error(   p4_b <- check_parameters(w4, p4_a, data = mtcars),   regex = NA ) expect_no_error(p4_b <- check_parameters(w4, p4_a, data = mtcars)) expect_error(tidy(pca, matrix = \"u\"), class = \"pca_error\") expect_error(tidy(pca, matrix = \"u\"), class = \"pca_error\") expect_warning(   tidy(fit, robust = TRUE),   '\"robust\" argument has been deprecated' ) expect_snapshot(   .res <- tidy(fit, robust = TRUE) ) expect_equal(   fit_resamples(decision_tree(cost_complexity = 1), bootstraps(mtcars)),   expect_warning(tune_grid(decision_tree(cost_complexity = 1), bootstraps(mtcars))) ) expect_snapshot({   fit_resamples_result <- fit_resamples(decision_tree(cost_complexity = 1),                                         bootstraps(mtcars))   tune_grid_result <- tune_grid(decision_tree(cost_complexity = 1),                                 bootstraps(mtcars)) }) expect_equal(fit_resamples_result, tune_grid_result) expect_snapshot_error(   fit_best(knn_pca_res, parameters = tibble(neighbors = 2)) ) expect_snapshot(   error = TRUE,   fit_best(knn_pca_res, parameters = tibble(neighbors = 2)) )"},{"path":"https://simonpcouch.github.io/chores/reference/testthat_helper.html","id":"interfacing-manually-with-the-testthat-helper","dir":"Reference","previous_headings":"","what":"Interfacing manually with the testthat helper","title":"The testthat helper — testthat_helper","text":"Chore helpers typically interfaced via chores addin. call testthat helper directly, use:   , submit query, run:","code":"helper_testthat <- .init_helper(\"testthat\") helper_testthat$chat({x})"},{"path":[]},{"path":"https://simonpcouch.github.io/chores/news/index.html","id":"chores-020","dir":"Changelog","previous_headings":"","what":"chores 0.2.0","title":"chores 0.2.0","text":"CRAN release: 2025-04-30 helper selection app, clicking helper selectize now submit selected choice. Previously, user click helper select submit selected choice pressing Return/Enter (#87). change aligns behavior UI selecting helpers mouse click versus /arrows. Users longer need call directory_load() manually adding new custom helpers; helper selection app refresh list available helpers app launch (#88).","code":""},{"path":"https://simonpcouch.github.io/chores/news/index.html","id":"chores-010","dir":"Changelog","previous_headings":"","what":"chores 0.1.0","title":"chores 0.1.0","text":"CRAN release: 2025-02-21 Initial CRAN submission.","code":""},{"path":"https://simonpcouch.github.io/chores/news/index.html","id":"notable-changes-pre-cran-submission-0-1-0","dir":"Changelog","previous_headings":"","what":"Notable changes pre-CRAN submission","title":"chores 0.1.0","text":"Early adopters package note changes made shortly release package CRAN: package renamed pal chores, grammar surrounding package shifted bit process: “pal pal package given role” now “helper chores package given chore.” configuration options .pal_fn .pal_args transitioned one option, .chores_chat. option takes ellmer Chat, e.g. options(.chores_chat = ellmer::chat_claude()). longer default ellmer model. Early development chores, ANTHROPIC_API_KEY set , addin “just work.” convenient Claude users, means package spends money users behalf without explicit opt-.","code":""}]
