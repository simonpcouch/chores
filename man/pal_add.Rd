% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal-add-remove.R
\name{pal_add}
\alias{pal_add}
\title{Creating custom pals}
\usage{
pal_add(
  role,
  prompt = NULL,
  shortcut = NULL,
  name = NULL,
  description = NULL,
  interface = c("replace", "prefix", "suffix")
)
}
\arguments{
\item{role}{A single string giving the \code{\link[=pal]{pal()}} role.}

\item{prompt}{A file path to a markdown file giving the system prompt or
the output of \code{\link[elmer:interpolate]{elmer::interpolate()}}.}

\item{name}{A name for the command palette description; will be prefixed
with "Pal: " for discoverability.}

\item{description}{A longer-form description of the functionality of the pal.}

\item{interface}{One of \code{"replace"}, \code{"prefix"}, or \code{"suffix"}, describing
how the pal will interact with the selection. For example, the
\link[=pal_cli]{cli pal} \code{"replace"}s the selection, while the
\link[=pal_roxygen]{roxygen pal} \code{"prefixes"} the selected code with documentation.}
}
\value{
The pal, invisibly. Called for its side effect: an add-in with name
"Pal: \code{name}" is registered with RStudio.
}
\description{
Users can create custom pals using the \code{pal_add()} function; after passing
the function a role and prompt, the pal will be available on the command
palette.
}
\details{
\code{pal_add()} will register the add-in as coming from the pal package
itselfâ€”because of this, custom pals will be deleted when the pal
package is reinstalled. Include \code{pal_add()} code in your \code{.Rprofile} or
make a pal extension package using \code{pal_add(package = TRUE)} to create
persistent custom pals.
}
